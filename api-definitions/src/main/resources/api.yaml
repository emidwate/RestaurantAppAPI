openapi: 3.0.0
info:
  title: api
  version: 1.0.0
  description: Endpoints for Restaurant App API

servers:
  - url: http://localhost:8080/api
    description: These are all of the endpoints for Restaurant App API

paths:
  /foodList:
    get:
      summary: Returns a list of all food currently available in the restaurant
      operationId: getFoodList
      responses:
        200:
          description: All available food
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodDTO"

  /food/{id}:
    get:
      summary: Get food item by id
      operationId: getFoodById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/GivenId"
      responses:
        200:
          description: Get food item by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodDTO"
    delete:
      summary: Delete food by id
      operationId: deleteFoodById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Food item deleted

  /food:
    post:
      summary: Add new food to the list
      operationId: addNewFood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodDTO"
      responses:
        200:
          description: Food added

  /orderList:
    get:
      summary: Returns a list of all customer order items being currently in the basket
      operationId: getOrder
      responses:
        200:
          description: All customer order items from the basket
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerOrderDTO"

  /orderItem:
    post:
      summary: Add food to customer order basket
      operationId: addItemToOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerOrderDTO"
      responses:
        200:
          description: Add food to customer order basket

  /orderItem/{id}:
    delete:
      summary: Delete item from customer order basket
      operationId: deleteItemFromOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/GivenId"
      responses:
        200:
          description: Food item deleted from customer order basket

  /order/basket/truncate:
    delete:
      summary: Truncate customer order basket
      operationId: truncateOrderTable
      responses:
        200:
          description: Truncated customer order basket

  /orders/{ordersId}:
    delete:
      summary: Delete orders by id
      operationId: deleteSavedOrderById
      parameters:
        - name: ordersId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/GivenId"
      responses:
        200:
          description: Deleted saved order

  /saveOrders:
    post:
      summary: Save order to database
      operationId: saveOrders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrdersDTO"
      responses:
        200:
          description: Saved order to database


components:
  schemas:
    GivenId:
      type: integer
      format: int64
    FoodDTO:
      type: object
      required:
        - id
        - name
        - ingredients
        - price
        - emoji
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: false
        ingredients:
          type: string
          nullable: false
        price:
          type: number
          minimum: 0
          nullable: false
        emoji:
          type: string
          nullable: false
    CustomerOrderDTO:
      type: object
      required:
        - customerOrderId
        - name
        - price
        - foodId
      properties:
        customerOrderId:
          type: integer
          format: int64
        name:
          type: string
          nullable: false
        price:
          type: number
          minimum: 0
          nullable: false
        foodId:
          type: integer
          format: int64
    CustomerSavedOrderDTO:
      type: object
      required:
        - savedOrderId
        - foodId
        - price
        - name
        - order
      properties:
        savedOrderId:
          type: integer
          format: int64
        foodId:
          type: integer
          format: int64
        price:
          type: number
          minimum: 0
          nullable: false
        name:
          type: string
          nullable: false
        order:
          $ref: "#/components/schemas/OrdersDTO"

    OrdersDTO:
      type: object
      required:
        - ordersId
        - status
        - customerSavedOrderList
      properties:
        ordersId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ORDERED
            - PENDING
            - COMPLETED
        customerSavedOrderList:
          type: array
          items:
            $ref: "#/components/schemas/CustomerSavedOrderDTO"
