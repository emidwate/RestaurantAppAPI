/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package food.api;

import food.models.FoodDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-15T20:34:40.824180900+01:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "food", description = "the food API")
public interface FoodApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /food : Add new food to the list
     *
     * @param foodDTO  (required)
     * @return Food added (status code 201)
     */
    @Operation(
        operationId = "addNewFood",
        summary = "Add new food to the list",
        responses = {
            @ApiResponse(responseCode = "201", description = "Food added")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/food",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _addNewFood(
        @Parameter(name = "FoodDTO", description = "", required = true) @Valid @RequestBody FoodDTO foodDTO
    ) {
        return addNewFood(foodDTO);
    }

    // Override this method
    default  ResponseEntity<Void> addNewFood(FoodDTO foodDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /food/{id} : Delete food by id
     *
     * @param id  (required)
     * @return Food item deleted (status code 200)
     */
    @Operation(
        operationId = "deleteFoodById",
        summary = "Delete food by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Food item deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/food/{id}"
    )
    
    default ResponseEntity<Void> _deleteFoodById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return deleteFoodById(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteFoodById(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /food/{id} : Get food item by id
     *
     * @param id  (required)
     * @return Get food item by id (status code 200)
     */
    @Operation(
        operationId = "getFoodById",
        summary = "Get food item by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get food item by id", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/food/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FoodDTO>> _getFoodById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getFoodById(id);
    }

    // Override this method
    default  ResponseEntity<List<FoodDTO>> getFoodById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emoji\" : \"emoji\", \"price\" : 0.6027456183070403, \"name\" : \"name\", \"ingredients\" : \"ingredients\", \"id\" : 0 }, { \"emoji\" : \"emoji\", \"price\" : 0.6027456183070403, \"name\" : \"name\", \"ingredients\" : \"ingredients\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
